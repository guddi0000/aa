package com.daa;
import java.util.Comparator;  
import java.util.PriorityQueue;  
import java.util.Scanner;  
class HuffmanNode {  
	  
    int data; //frequency 
    char c;  
  
    HuffmanNode left;  
    HuffmanNode right;  
}    
class MyComparator implements Comparator<HuffmanNode> {  
    public int compare(HuffmanNode x, HuffmanNode y)  
    {  
        return x.data - y.data;  
    }  
}    


class Huffman {  
    
    public static void printCode(HuffmanNode root, String s)  
    {    
        if (root.left == null && root.right == null  
            && Character.isLetter(root.c)) {  
  
            System.out.println(root.c + "  |  " + s);  
  
            return;  
        }  
  
        printCode(root.left, s + "0");  
        printCode(root.right, s + "1");  
    }  
 
    
    
    public static void main(String[] args)  
    {  
        Scanner s = new Scanner(System.in);  
      
        int n = 4;  
        char[] charArray = { 'A', 'B', 'C', 'D'};  
        int[] charfreq = { 5, 1, 6, 3 };  
  
        //assign priority according to frequency(min)
        PriorityQueue<HuffmanNode> q  = new PriorityQueue<HuffmanNode>( n, new MyComparator());  
  
        for (int i = 0; i < n; i++) {   
            HuffmanNode hn = new HuffmanNode();  
  
            hn.c = charArray[i];  
            hn.data = charfreq[i];  
  
            hn.left = null;  
            hn.right = null;  
            q.add(hn);  
        }  
        
        HuffmanNode root = null;   
        while (q.size() > 1) {  
  
            // first min extract.  
            HuffmanNode x = q.peek();  
            q.poll();  //remove from queue
            
            // second min extract.  
            HuffmanNode y = q.peek();  
            q.poll();  
  
            // new node f which is equal  
            HuffmanNode f = new HuffmanNode();  
  
            // to the sum of the frequency of the two nodes  
            // assigning values to the f node.  
            f.data = x.data + y.data;  
            f.c = '-';  
            
            // first extracted node as left child.  
            f.left = x;  
            
            // second extracted node as the right child.  
            f.right = y;  
            
            root = f;  
   
            q.add(f);  
        }  
   
        System.out.println("Char | Huffman Code");
        System.out.println("--------------------");
        printCode(root, "");  
    }  
}    
